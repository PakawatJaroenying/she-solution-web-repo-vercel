import { ObjectSchema } from "yup"
import * as yup from 'yup'
import { LawCorporationCriteria } from "./formdata-type"
import { buildingSchema, factorySchema, organizationTypeSchema } from "@/app/lib/branch"

export const lawCorporationCriteriaSchema: ObjectSchema<LawCorporationCriteria> = yup.object().shape({
  settlement: yup.object().shape({
      // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ isSettlement ‡πÄ‡∏õ‡πá‡∏ô true
      isSettlement: yup.boolean().defined('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ô‡∏¥‡∏Ñ‡∏°'),
      settlements: yup
        .array(yup.string().defined('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏¥‡∏Ñ‡∏°'))
        .when('isSettlement', (isSettlement, schema) => {
          // console.log("üöÄ ~ .when ~ isSettlement:", isSettlement)
          return isSettlement.some(it=>it) ? schema.min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏¥‡∏Ñ‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ô‡∏¥‡∏Ñ‡∏°') : schema
        })
        .defined('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏¥‡∏Ñ‡∏°')
    }),
    organizationType: organizationTypeSchema,
    factory: factorySchema,
    building: buildingSchema
  })